{"version":3,"file":"component-registry.js","sourceRoot":"","sources":["../src/component-registry.ts"],"names":[],"mappings":"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","sourcesContent":["import { given } from \"@nivinjoseph/n-defensive\";\nimport { Lifestyle } from \"./lifestyle\";\nimport { ApplicationException } from \"@nivinjoseph/n-exception\";\nimport { ComponentRegistration } from \"./component-registration\";\n\n// internal\nexport class ComponentRegistry\n{\n    private readonly _registrations = new Array<ComponentRegistration>();\n    private readonly _registry: {[index: string]: ComponentRegistration} = {};\n\n\n    public register(key: string, component: Function, lifestyle: Lifestyle): void\n    {\n        given(key, \"key\").ensureHasValue().ensure(t => !t.isEmptyOrWhiteSpace());\n        given(component, \"component\").ensureHasValue();\n        given(lifestyle, \"lifestyle\").ensureHasValue();\n\n        key = key.trim();\n        if (this._registry[key])\n            throw new ApplicationException(\"Duplicate registration for key '{0}'\".format(key));\n\n        let registration = new ComponentRegistration(key, component, lifestyle);\n        this._registrations.push(registration);\n        this._registry[key] = registration;\n    }\n\n    public verifyRegistrations(): void\n    {\n        for (let registration of this._registrations)\n            this.walkDependencyGraph(registration);\n    }\n\n    public find(key: string): ComponentRegistration\n    {\n        given(key, \"key\").ensureHasValue().ensure(t => !t.isEmptyOrWhiteSpace());\n\n        key = key.trim();\n        let result = this._registry[key];\n        if (!result)\n        {\n            result = this._registrations.find(t => t.key === key);\n            if (!result)\n                console.log(\"COULD NOT FIND IN COMPONENT REGISTRY\", key);    \n        }  \n        \n        return result;\n    }\n\n    private walkDependencyGraph(registration: ComponentRegistration, visited: {[index: string]: ComponentRegistration} = {}): void\n    {\n        // check if current is in visited\n        // add current to visited\n        // check if the dependencies are registered\n        // walk the dependencies reusing the visited\n        // remove current from visited\n\n        if (visited[registration.key])\n            throw new ApplicationException(\"Circular dependency detected with registration '{0}'.\".format(registration.key));\n\n        visited[registration.key] = registration;\n\n        for (let dependency of registration.dependencies)\n        {\n            if (!this._registry[dependency])\n                throw new ApplicationException(\"Unregistered dependency '{0}' detected.\".format(dependency));\n            \n            let dependencyRegistration = this._registry[dependency] as ComponentRegistration;\n            \n            // rules\n            // singleton --> singleton ==> good (child & root)\n            // singleton --> scoped =====> bad\n            // singleton --> transient ==> good (child & root)\n            // scoped -----> singleton ==> good (child only)\n            // scoped -----> scoped =====> good (child only)\n            // scoped -----> transient ==> good (child only)\n            // transient --> singleton ==> good (child & root)\n            // transient --> scoped =====> good (child only)\n            // transient --> transient ==> good (child & root)\n            \n            if (registration.lifestyle === Lifestyle.Singleton && dependencyRegistration.lifestyle === Lifestyle.Scoped)\n                throw new ApplicationException(\"Singleton with a scoped dependency detected.\");    \n            \n            this.walkDependencyGraph(dependencyRegistration, visited);\n        }\n\n        visited[registration.key] = null;\n    }\n}"]}