{"version":3,"file":"component-registry.js","sourceRoot":"","sources":["../src/component-registry.ts"],"names":[],"mappings":"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","sourcesContent":["import given from \"n-defensive\";\nimport Lifestyle from \"./lifestyle\";\nimport { ApplicationException } from \"n-exception\";\nimport ComponentRegistration from \"./component-registration\";\n\n// internal\nexport default class ComponentRegistry\n{\n    private readonly _registrations = new Array<ComponentRegistration>();\n    private readonly _registry = {};\n\n\n    public register(key: string, component: Function, lifestyle: Lifestyle): void\n    {\n        given(key, \"key\").ensureHasValue().ensure(t => !t.isEmptyOrWhiteSpace());\n        given(component, \"component\").ensureHasValue().ensure(t => typeof t === \"function\");\n        given(lifestyle, \"lifestyle\").ensureHasValue();\n\n        key = key.trim();\n        if (this._registry[key])\n            throw new ApplicationException(\"Duplicate registration for key '{0}'\".format(key));\n\n        let registration = new ComponentRegistration(key, component, lifestyle);\n        this._registrations.push(registration);\n        this._registry[key] = registration;\n    }\n\n    public verifyRegistrations(): void\n    {\n        for (let registration of this._registrations)\n            this.walkDependencyGraph(registration);\n    }\n\n    public find(key: string): ComponentRegistration\n    {\n        given(key, \"key\").ensureHasValue().ensure(t => !t.isEmptyOrWhiteSpace());\n\n        key = key.trim();\n        return this._registry[key];\n    }\n\n    private walkDependencyGraph(registration: ComponentRegistration, visited: object = {}): void\n    {\n        // check if current is in visited\n        // add current to visited\n        // check if the dependencies are registered\n        // walk the dependencies reusing the visited\n        // remove current from visited\n\n        if (visited[registration.key])\n            throw new ApplicationException(\"Circular dependency detected with registration '{0}'.\".format(registration.key));\n\n        visited[registration.key] = registration;\n\n        for (let dependency of registration.dependencies)\n        {\n            if (!this._registry[dependency])\n                throw new ApplicationException(\"Unregistered dependency '{0}' detected.\".format(dependency));\n\n            this.walkDependencyGraph(this._registry[dependency], visited);\n        }\n\n        visited[registration.key] = null;\n    }\n}"]}