{"version":3,"file":"component-registry.js","sourceRoot":"","sources":["../src/component-registry.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,0DAAiD;AACjD,2CAAwC;AACxC,0DAAyF;AACzF,qEAAiE;AACjE,mDAA+C;AAI/C,MAAa,iBAAiB;IAA9B;QAEqB,mBAAc,GAAG,IAAI,KAAK,EAAyB,CAAC;QACpD,cAAS,GAA+C,EAAE,CAAC;QACpE,gBAAW,GAAG,KAAK,CAAC;IAmHhC,CAAC;IAhHU,QAAQ,CAAC,GAAW,EAAE,SAA4B,EAAE,SAAoB,EAAE,GAAG,OAAiB;QAEjG,IAAI,IAAI,CAAC,WAAW;YAChB,MAAM,IAAI,qCAAuB,CAAC,IAAI,CAAC,CAAC;QAE5C,mBAAK,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,cAAc,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,mBAAmB,EAAE,CAAC,CAAC;QACzE,mBAAK,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC,cAAc,EAAE,CAAC;QAC/C,mBAAK,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC,cAAc,EAAE,CAAC,cAAc,EAAE,CAAC;QAChE,mBAAK,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC,cAAc,EAAE,CAAC,aAAa,EAAE;aACrD,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,GAAG,CAAC,EAAE,iCAAiC,CAAC;aACvE,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC,QAAQ,EAAE,CAAC,MAAM,EAAE,qBAAqB,CAAC,CAAC;QAE1E,GAAG,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;QACjB,IAAI,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC;YACnB,MAAM,IAAI,kCAAoB,CAAC,sCAAsC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;QAEvF,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;YAEhB,MAAM,KAAK,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC;YACvB,IAAI,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC;gBACrB,MAAM,IAAI,kCAAoB,CAAC,wCAAwC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;QAC/F,CAAC,CAAC,CAAC;QAEH,IAAI,YAAY,GAAG,IAAI,8CAAqB,CAAC,GAAG,EAAE,SAAS,EAAE,SAAS,EAAE,GAAG,OAAO,CAAC,CAAC;QACpF,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QACvC,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,GAAG,CAAC,GAAG,YAAY,CAAC;QAChD,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,GAAG,YAAY,CAAC,CAAC;IACxE,CAAC;IAEM,mBAAmB;QAEtB,IAAI,IAAI,CAAC,WAAW;YAChB,MAAM,IAAI,qCAAuB,CAAC,IAAI,CAAC,CAAC;QAE5C,KAAK,IAAI,YAAY,IAAI,IAAI,CAAC,cAAc;YACxC,IAAI,CAAC,mBAAmB,CAAC,YAAY,CAAC,CAAC;IAC/C,CAAC;IAEM,IAAI,CAAC,GAAW;QAEnB,IAAI,IAAI,CAAC,WAAW;YAChB,MAAM,IAAI,qCAAuB,CAAC,IAAI,CAAC,CAAC;QAE5C,mBAAK,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,cAAc,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,mBAAmB,EAAE,CAAC,CAAC;QAEzE,GAAG,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;QACjB,IAAI,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;QACjC,IAAI,CAAC,MAAM,EACX;YACI,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,KAAK,GAAG,IAAI,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;YACxF,IAAI,CAAC,MAAM;gBACP,OAAO,CAAC,GAAG,CAAC,sCAAsC,EAAE,GAAG,CAAC,CAAC;SAChE;QAED,OAAO,MAAM,CAAC;IAClB,CAAC;IAEY,OAAO;;YAEhB,IAAI,IAAI,CAAC,WAAW;gBAChB,OAAO;YAEX,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;YAExB,MAAO,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;QAChE,CAAC;KAAA;IAGO,mBAAmB,CAAC,YAAmC,EAAE,UAAoD,EAAE;QAQnH,IAAI,OAAO,CAAC,YAAY,CAAC,GAAG,CAAC,IAAI,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YACzE,MAAM,IAAI,kCAAoB,CAAC,uDAAuD,CAAC,MAAM,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC;QAErH,OAAO,CAAC,YAAY,CAAC,GAAG,CAAC,GAAG,YAAY,CAAC;QACzC,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,YAAY,CAAC,CAAC;QAE7D,KAAK,IAAI,UAAU,IAAI,YAAY,CAAC,YAAY,EAChD;YACI,IAAI,UAAU,KAAK,4BAAY,CAAC,cAAc;gBAC1C,SAAS;YAEb,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC;gBAC3B,MAAM,IAAI,kCAAoB,CAAC,yCAAyC,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;YAEjG,IAAI,sBAAsB,GAAG,IAAI,CAAC,SAAS,CAAC,UAAU,CAA0B,CAAC;YAajF,IAAI,YAAY,CAAC,SAAS,KAAK,qBAAS,CAAC,SAAS,IAAI,sBAAsB,CAAC,SAAS,KAAK,qBAAS,CAAC,MAAM;gBACvG,MAAM,IAAI,kCAAoB,CAAC,8CAA8C,CAAC,CAAC;YAEnF,IAAI,CAAC,mBAAmB,CAAC,sBAAsB,EAAE,OAAO,CAAC,CAAC;SAC7D;QAED,OAAO,CAAC,YAAY,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;QACjC,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;IACzD,CAAC;CACJ;AAvHD,8CAuHC","sourcesContent":["import { given } from \"@nivinjoseph/n-defensive\";\nimport { Lifestyle } from \"./lifestyle\";\nimport { ApplicationException, ObjectDisposedException } from \"@nivinjoseph/n-exception\";\nimport { ComponentRegistration } from \"./component-registration\";\nimport { ReservedKeys } from \"./reserved-keys\";\nimport { Disposable } from \"@nivinjoseph/n-util\";\n\n// internal\nexport class ComponentRegistry implements Disposable\n{\n    private readonly _registrations = new Array<ComponentRegistration>();\n    private readonly _registry: { [index: string]: ComponentRegistration } = {};\n    private _isDisposed = false;\n\n\n    public register(key: string, component: Function | object, lifestyle: Lifestyle, ...aliases: string[]): void\n    {\n        if (this._isDisposed)\n            throw new ObjectDisposedException(this);\n        \n        given(key, \"key\").ensureHasValue().ensure(t => !t.isEmptyOrWhiteSpace());\n        given(component, \"component\").ensureHasValue();\n        given(lifestyle, \"lifestyle\").ensureHasValue().ensureIsNumber();\n        given(aliases, \"aliases\").ensureHasValue().ensureIsArray()\n            .ensure(t => t.every(u => u !== key), \"alias cannot be the same as key\")\n            .ensure(t => t.length === t.distinct().length, \"duplicates detected\");\n\n        key = key.trim();\n        if (this._registry[key])\n            throw new ApplicationException(\"Duplicate registration for key '{0}'\".format(key));\n        \n        aliases.forEach(t =>\n        {\n            const alias = t.trim();\n            if (this._registry[alias])\n                throw new ApplicationException(\"Duplicate registration for alias '{0}'\".format(alias));\n        });\n\n        let registration = new ComponentRegistration(key, component, lifestyle, ...aliases);\n        this._registrations.push(registration);\n        this._registry[registration.key] = registration;\n        registration.aliases.forEach(t => this._registry[t] = registration);\n    }\n\n    public verifyRegistrations(): void\n    {\n        if (this._isDisposed)\n            throw new ObjectDisposedException(this);\n        \n        for (let registration of this._registrations)\n            this.walkDependencyGraph(registration);\n    }\n\n    public find(key: string): ComponentRegistration\n    {\n        if (this._isDisposed)\n            throw new ObjectDisposedException(this);\n        \n        given(key, \"key\").ensureHasValue().ensure(t => !t.isEmptyOrWhiteSpace());\n\n        key = key.trim();\n        let result = this._registry[key];\n        if (!result)\n        {\n            result = this._registrations.find(t => t.key === key || t.aliases.some(u => u === key));\n            if (!result)\n                console.log(\"COULD NOT FIND IN COMPONENT REGISTRY\", key);    \n        }  \n        \n        return result;\n    }\n    \n    public async dispose(): Promise<void>\n    {\n        if (this._isDisposed)\n            return;\n        \n        this._isDisposed = true;\n        \n        await  Promise.all(this._registrations.map(t => t.dispose));\n    }\n    \n\n    private walkDependencyGraph(registration: ComponentRegistration, visited: {[index: string]: ComponentRegistration} = {}): void\n    {\n        // check if current is in visited\n        // add current to visited\n        // check if the dependencies are registered\n        // walk the dependencies reusing the visited\n        // remove current from visited\n\n        if (visited[registration.key] || registration.aliases.some(t => !!visited[t]))\n            throw new ApplicationException(\"Circular dependency detected with registration '{0}'.\".format(registration.key));\n\n        visited[registration.key] = registration;\n        registration.aliases.forEach(t => visited[t] = registration);\n\n        for (let dependency of registration.dependencies)\n        {\n            if (dependency === ReservedKeys.serviceLocator)\n                continue;\n            \n            if (!this._registry[dependency])\n                throw new ApplicationException(\"Unregistered dependency '{0}' detected.\".format(dependency));\n            \n            let dependencyRegistration = this._registry[dependency] as ComponentRegistration;\n            \n            // rules\n            // singleton --> singleton ==> good (child & root)\n            // singleton --> scoped =====> bad\n            // singleton --> transient ==> good (child & root)\n            // scoped -----> singleton ==> good (child only)\n            // scoped -----> scoped =====> good (child only)\n            // scoped -----> transient ==> good (child only)\n            // transient --> singleton ==> good (child & root)\n            // transient --> scoped =====> good (child only)\n            // transient --> transient ==> good (child & root)\n            \n            if (registration.lifestyle === Lifestyle.Singleton && dependencyRegistration.lifestyle === Lifestyle.Scoped)\n                throw new ApplicationException(\"Singleton with a scoped dependency detected.\");    \n            \n            this.walkDependencyGraph(dependencyRegistration, visited);\n        }\n\n        visited[registration.key] = null;\n        registration.aliases.forEach(t => visited[t] = null);\n    }\n}"]}