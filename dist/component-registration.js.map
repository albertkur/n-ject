{"version":3,"file":"component-registration.js","sourceRoot":"","sources":["../src/component-registration.ts"],"names":[],"mappings":";;AACA,2CAAgC;AAEhC,WAAW;AACX;IAcI,+BAAmB,GAAW,EAAE,SAAmB,EAAE,SAAoB;QAErE,qBAAK,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,cAAc,EAAE,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,CAAC,mBAAmB,EAAE,EAAxB,CAAwB,CAAC,CAAC;QACzE,qBAAK,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC,cAAc,EAAE,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,OAAO,CAAC,KAAK,UAAU,EAAvB,CAAuB,CAAC,CAAC;QACpF,qBAAK,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC,cAAc,EAAE,CAAC;QAE/C,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;QAChB,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;QAC5B,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;QAC5B,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,kBAAkB,EAAE,CAAC;IACnD,CAAC;IAhBD,sBAAW,sCAAG;aAAd,cAA2B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;;;OAAA;IAC9C,sBAAW,4CAAS;aAApB,cAAmC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;;;OAAA;IAC5D,sBAAW,4CAAS;aAApB,cAAoC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;;;OAAA;IAC7D,sBAAW,+CAAY;aAAvB,cAA2C,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;;;OAAA;IAgBvE,yCAAyC;IACjC,kDAAkB,GAA1B;QAEI,IAAM,YAAY,GAAG,GAAG,CAAC;QACzB,IAAM,MAAM,GAAG,sBAAsB,CAAC;QAEtC,IAAI,YAAY,GAAG,IAAI,KAAK,EAAU,CAAC;QAEvC,IAAI,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAChD,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,UAAA,GAAG;YAEtC,GAAG,CAAC,OAAO,CAAC,MAAM,EAAE,UAAC,GAAG,EAAE,UAAU,EAAE,IAAI;gBAEtC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBACxB,MAAM,CAAC,SAAS,CAAC;YACrB,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,YAAY,CAAC;IACxB,CAAC;IAEO,2CAAW,GAAnB,UAAoB,EAAE;QAElB,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAChD,CAAC;IAEO,2CAAW,GAAnB,UAAoB,EAAE;QAElB,IAAM,SAAS,GAAG,aAAa,CAAC;QAChC,IAAM,OAAO,GAAG,uBAAuB,CAAC;QACxC,IAAM,cAAc,GAAG,kCAAkC,CAAC;QAE1D,IAAI,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC,CAAC;QAC9D,IAAI,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QAC5D,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IACL,4BAAC;AAAD,CAAC,AA/DD,IA+DC","sourcesContent":["import Lifestyle from \"./lifestyle.js\"; \nimport given from \"n-defensive\";\n\n// internal\nexport default class ComponentRegistration\n{\n    private readonly _key: string;\n    private readonly _component: Function;\n    private readonly _lifestyle: Lifestyle;\n    private readonly _dependencies: Array<string>;\n\n\n    public get key(): string { return this._key; }\n    public get component(): Function { return this._component; }\n    public get lifestyle(): Lifestyle { return this._lifestyle; }\n    public get dependencies(): Array<string> { return this._dependencies; }\n\n\n    public constructor(key: string, component: Function, lifestyle: Lifestyle)\n    {\n        given(key, \"key\").ensureHasValue().ensure(t => !t.isEmptyOrWhiteSpace());\n        given(component, \"component\").ensureHasValue().ensure(t => typeof t === \"function\");\n        given(lifestyle, \"lifestyle\").ensureHasValue();\n        \n        this._key = key;\n        this._component = component;\n        this._lifestyle = lifestyle;\n        this._dependencies = this.detectDependencies();\n    }\n\n\n    // Borrowed from AngularJS implementation\n    private detectDependencies(): Array<string>\n    {\n        const FN_ARG_SPLIT = /,/;\n        const FN_ARG = /^\\s*(_?)(\\S+?)\\1\\s*$/;\n\n        let dependencies = new Array<string>();\n\n        let argDecl = this.extractArgs(this._component);\n        argDecl[1].split(FN_ARG_SPLIT).forEach(arg =>\n        {\n            arg.replace(FN_ARG, (all, underscore, name) =>\n            {\n                dependencies.push(name);\n                return undefined;\n            });\n        });\n\n        return dependencies;\n    }\n\n    private stringifyFn(fn): string\n    {\n        return Function.prototype.toString.call(fn);\n    }\n\n    private extractArgs(fn): RegExpMatchArray\n    {\n        const ARROW_ARG = /^([^(]+?)=>/;\n        const FN_ARGS = /^[^(]*\\(\\s*([^)]*)\\)/m;\n        const STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;\n\n        let fnText = this.stringifyFn(fn).replace(STRIP_COMMENTS, \"\");\n        let args = fnText.match(ARROW_ARG) || fnText.match(FN_ARGS);\n        return args;\n    }\n}"]}