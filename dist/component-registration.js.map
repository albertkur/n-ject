{"version":3,"file":"component-registration.js","sourceRoot":"","sources":["../src/component-registration.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,iDAA2C;AAC3C,0DAAiD;AACjD,4BAA0B;AAC1B,qCAAwC;AAIxC,MAAa,qBAAqB;IAiB9B,YAAmB,GAAW,EAAE,SAA4B,EAAE,SAAoB,EAAE,GAAG,OAAiB;QAVhG,gBAAW,GAAG,KAAK,CAAC;QAYxB,mBAAK,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,cAAc,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,mBAAmB,EAAE,CAAC,CAAC;QACzE,mBAAK,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC,cAAc,EAAE,CAAC;QAC/C,mBAAK,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC,cAAc,EAAE,CAAC,cAAc,EAAE,CAAC;QAChE,mBAAK,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC,cAAc,EAAE,CAAC,aAAa,EAAE;aACrD,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,GAAG,CAAC,EAAE,iCAAiC,CAAC;aACvE,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC,QAAQ,EAAE,CAAC,MAAM,EAAE,qBAAqB,CAAC,CAAC;QAE1E,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;QAChB,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;QAC5B,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;QAC5B,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;QAC5C,IAAI,CAAC,QAAQ,GAAG,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;IACpD,CAAC;IArBD,IAAW,GAAG,KAAa,OAAO,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IAC9C,IAAW,SAAS,KAAwB,OAAO,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;IACrE,IAAW,SAAS,KAAgB,OAAO,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;IAC7D,IAAW,YAAY,KAA4B,OAAO,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;IAC/E,IAAW,OAAO,KAA4B,OAAO,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;IAoBxD,OAAO;;YAEhB,IAAI,IAAI,CAAC,WAAW;gBAChB,OAAO;YAEX,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;YAExB,IAAI,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,UAAU,IAAiB,IAAI,CAAC,UAAW,CAAC,OAAO,EACpF;gBACI,IACA;oBACI,MAAmB,IAAI,CAAC,UAAW,CAAC,OAAO,EAAE,CAAC;iBACjD;gBACD,OAAO,KAAK,EACZ;oBACI,OAAO,CAAC,KAAK,CAAC,gDAAgD,IAAI,CAAC,IAAI,cAAuB,IAAI,CAAC,UAAW,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;oBAClI,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;iBACxB;aACJ;QACL,CAAC;KAAA;IAGO,eAAe;QAEnB,IAAI,IAAI,CAAC,UAAU,KAAK,wBAAS,CAAC,QAAQ;YACtC,OAAO,IAAI,KAAK,EAAU,CAAC;QAO/B,OAAO,OAAO,CAAC,cAAc,CAAC,qBAAY,EAAE,IAAI,CAAC,UAAU,CAAC;YACxD,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC,qBAAY,EAAE,IAAI,CAAC,UAAU,CAAC;YACvD,CAAC,CAAC,IAAI,KAAK,EAAU,CAAC;IAC9B,CAAC;CAuCJ;AA5GD,sDA4GC","sourcesContent":["import { Lifestyle } from \"./lifestyle.js\"; \nimport { given } from \"@nivinjoseph/n-defensive\";\nimport \"reflect-metadata\";\nimport { injectSymbol } from \"./inject\";\nimport { Disposable } from \"@nivinjoseph/n-util\";\n\n// internal\nexport class ComponentRegistration implements Disposable\n{\n    private readonly _key: string;\n    private readonly _component: Function | object;\n    private readonly _lifestyle: Lifestyle;\n    private readonly _dependencies: Array<string>;\n    private readonly _aliases: ReadonlyArray<string>;\n    private _isDisposed = false;\n\n\n    public get key(): string { return this._key; }\n    public get component(): Function | object { return this._component; }\n    public get lifestyle(): Lifestyle { return this._lifestyle; }\n    public get dependencies(): ReadonlyArray<string> { return this._dependencies; }\n    public get aliases(): ReadonlyArray<string> { return this._aliases; }\n\n\n    public constructor(key: string, component: Function | object, lifestyle: Lifestyle, ...aliases: string[])\n    {\n        given(key, \"key\").ensureHasValue().ensure(t => !t.isEmptyOrWhiteSpace());\n        given(component, \"component\").ensureHasValue();\n        given(lifestyle, \"lifestyle\").ensureHasValue().ensureIsNumber();\n        given(aliases, \"aliases\").ensureHasValue().ensureIsArray()\n            .ensure(t => t.every(u => u !== key), \"alias cannot be the same as key\")\n            .ensure(t => t.length === t.distinct().length, \"duplicates detected\");\n        \n        this._key = key;\n        this._component = component;\n        this._lifestyle = lifestyle;\n        this._dependencies = this.getDependencies();\n        this._aliases = [...aliases.map(t => t.trim())];\n    }\n\n    \n    public async dispose(): Promise<void>\n    {\n        if (this._isDisposed)\n            return;\n        \n        this._isDisposed = true;\n        \n        if (typeof (this._component) !== \"function\" && (<Disposable>this._component).dispose)\n        {\n            try \n            {\n                await (<Disposable>this._component).dispose();\n            }\n            catch (error)\n            {\n                console.error(`Error: Failed to dispose component with key '${this._key}' of type '${(<Object>this._component).getTypeName()}'.`);\n                console.error(error);\n            }\n        }\n    }\n    \n    \n    private getDependencies(): string[]\n    {\n        if (this._lifestyle === Lifestyle.Instance)\n            return new Array<string>();    \n        \n        // if (Reflect.hasOwnMetadata(injectSymbol, this._component))\n        //     return Reflect.getOwnMetadata(injectSymbol, this._component);\n        // else\n        //     return this.detectDependencies();    \n        \n        return Reflect.hasOwnMetadata(injectSymbol, this._component)\n            ? Reflect.getOwnMetadata(injectSymbol, this._component)\n            : new Array<string>();\n    }\n\n    \n    // Borrowed from AngularJS implementation\n    // private detectDependencies(): Array<string>\n    // {\n    //     const FN_ARG_SPLIT = /,/;\n    //     const FN_ARG = /^\\s*(_?)(\\S+?)\\1\\s*$/;\n\n    //     let dependencies = new Array<string>();\n\n    //     let argDecl = this.extractArgs(this._component);\n    //     argDecl[1].split(FN_ARG_SPLIT).forEach(arg =>\n    //     {\n    //         arg.replace(FN_ARG, (all, underscore, name) =>\n    //         {\n    //             dependencies.push(name);\n    //             return undefined;\n    //         });\n    //     });\n\n    //     return dependencies;\n    // }\n\n    // private stringifyFn(fn: Function): string\n    // {\n    //     return Function.prototype.toString.call(fn);\n    // }\n\n    // private extractArgs(fn: Function): RegExpMatchArray\n    // {\n    //     const ARROW_ARG = /^([^(]+?)=>/;\n    //     const FN_ARGS = /^[^(]*\\(\\s*([^)]*)\\)/m;\n    //     const STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;\n\n    //     let fnText = this.stringifyFn(fn).replace(STRIP_COMMENTS, \"\");\n    //     let args = fnText.match(ARROW_ARG) || fnText.match(FN_ARGS);\n    //     return args;\n    // }\n}"]}